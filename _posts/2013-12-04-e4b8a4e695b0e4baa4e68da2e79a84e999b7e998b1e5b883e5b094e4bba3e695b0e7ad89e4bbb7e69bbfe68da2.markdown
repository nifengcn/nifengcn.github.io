---
author: nifeng
comments: true
date: 2013-12-04 14:52:04+00:00
layout: post
title: 两数交换的陷阱and位运算等价替换
wordpress_id: 337
categories:
- tech
tags:
- 位运算
- 算法题
---

好久没有更新blog,这是不对的。在这表个态，目标是以后一周至少写一篇，否则。。。（没有否则）。今天算是个开始吧，这篇就举两道题。
##两数交换##
写一个两数交换的程序，拿张纸或者打开vim,咔咔就有了下面的:

{% highlight c %}
void swap(int *x,int *y) {
    int tmp = *x;
    *x = *y;
    *y = tmp;
}
{% endhighlight %}

如果再加个限制，不使用额外的变量，于是咔咔有了底下的：
{% highlight c %}
void swap(int *x,int *y) {
    *x = *x + *y;
    *y = *x - *y;
    *x = *x - *y;
}
{% endhighlight %}

再多思考一下，如果*x和*y的值都比较大，上面的代码可能就不适用了，可以把上面的加法换成异或:

{% highlight c %}
void swap(int *x,int *y) {
    *x = *x ^ *y;
    *y = *x ^ *y;
    *x = *x ^ *y;
}
{% endhighlight %}

基本上到这里，大多数人都认为没啥问题了，但是上面的代码的运行结果符合预期是有一个前提的，那就是x不能等于y。
如果x等于y，上面的代码运行完之后，x和y指向的值就会变成0了。
这里主要的问题在于，如果x等于y的话，上面代码第二行执行完之后，由于x,y指向的是同一个地址，`*x`和`*y`的值都变了。

##位运算等价替换##

给定两个运算指令，bis(位设置）和bic（位清除）。两个指令的输入都是一个数据字x和一个掩码字m。它们生成一个结果z，z是由根据掩码m的位来修改x的位得到的。使用bis指令，就是在m为1的每个位置上，将z对应的位设置为1。使用bic指令，这种修改就是在m为1的每个位置，将z对应的位设置为0。
假设不使用任何其他C语言运算，用bis和bic来实现&（bool_and)，｜(bool_or)，^(bool_xor)运算。

{% highlight c %}
int bis(int x,int m);
int bic(int x,int m);
{% endhighlight %}

很明显bis和|运算是等价的：

{% highlight c %}
bool_or(x,y) = bis(x,y);
{% endhighlight %}

那么bool_and和bool_xor呢？我们可以用类似于并集，交集，差集的概念来对比下。bool_and是交集的概念，bool_or和bis都是并集的概念，bic是x减去y的差集，bool_xor是（x减去y的差集）与（y减去x的差集）的并集，那么就可以比较自然地得出下面的结论：
{% highlight c %}
bool_xor(x,y) = bis(bic(x,y),bic(y,x));
bool_and(x,y) = bic(bis(x,y),bool_xor(x,y));
{% endhighlight %}
更进一步，只用bis和bic能表示出bool_not么？

很遗憾，是不能。简单地想一下，为什么不能呢？
因为bool_not(x)是一元运算符，bis和bic都是二元运算符，拿一个不相干的数，无论如何操作都不可推出x的内部结构（0，1）。

再想复杂一点，就涉及到完备集的概念了：

布尔运算主要由（&，｜，~，^）组成，实际上^完全可以由（&，|，~）表示出来（想想析取范式，合取范式），实际上（&，|，~）就是一个完备集。
而（bis,bic)是构不成一个完备集的。（&，|，~）不是唯一的完备集，如果有蕴涵的话，（非，蕴涵）也是一个完备集。

当然，你也可以自己定义一些运算来构成一个完备集。

