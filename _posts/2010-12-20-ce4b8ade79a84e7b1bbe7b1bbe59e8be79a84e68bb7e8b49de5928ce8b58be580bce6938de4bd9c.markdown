---
author: nifeng
comments: true
date: 2010-12-20 03:33:15+00:00
layout: post
slug: c%e4%b8%ad%e7%9a%84%e7%b1%bb%e7%b1%bb%e5%9e%8b%e7%9a%84%e6%8b%b7%e8%b4%9d%e5%92%8c%e8%b5%8b%e5%80%bc%e6%93%8d%e4%bd%9c
title: c++中的类类型的拷贝和赋值操作
wordpress_id: 47
categories: tech
tags: [C, C++]
---

在C++的类中，我们将复制（拷贝）构造函数、赋值操作符和析构函数总称为复制控制语句。

在C++ primer中关于复制控制这一章，有这么一段话：

>string null_book="9-999-99999-9";

>创建null_book时，编译器首先调用接受一个C风格字符串形参的string构造函数，创建一个临时对象，
>然后编译器使用string复制构造函数将null_book初始化为那个临时对象的副本。

这句话咋一看上去，似乎不好理解，为什么赋值操作会调用复制构造函数呢？难道所有的赋值操作都会调用复制构造函数？

首先我们先明确一下概念，什么是赋值操作？这里我们认为调用了赋值操作符函数的操作为赋值操作；

string null_book="9-999-99999-9"这个操作并没有调用赋值操作符函数，仅仅调用了复制构造函数，这一过程称为copy-initialization。

如果按如下的写法，我们则认为发生了赋值操作：

{% highlight c++ %}
string null_book;
null_book="9-999-99999-9";
{% endhighlight %}

这里null_book首先调用了默认的构造函数，完成了初始化，随后进行了一个赋值操作。

现在可以回答这两个问题了：为什么赋值操作会调用复制构造函数呢？难道所有的赋值操作都会调用复制构造函数？

赋值操作并不会调用复制构造函数，只有copy-initialization这种方式才会调用复制构造函数，
而且copy-initialization这种方式并不会调用赋值操作符函数。
