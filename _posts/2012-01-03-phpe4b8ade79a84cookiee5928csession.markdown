---
author: nifeng
comments: true
date: 2012-01-03 13:31:42+00:00
layout: post
slug: php%e4%b8%ad%e7%9a%84cookie%e5%92%8csession
title: WEB开发中的cookie和session
wordpress_id: 155
categories:
- tech
tags:
- cookie
- session
---

WEB开发中，cookie和session是两个比较重要的概念。

不过在谈这两个概念之前，我们先来聊一聊HTTP协议，首先翻一翻教科书，书上是这么说的：

>Http协议定义了浏览器怎么样向万维网服务器请求万维网文档以及服务器怎样把文档传送给浏览器。
>Http协议规定在Http客户与Http服务器之间的每次交互，
>都是由一个ASCII码串构成的请求和一个类MIME（MIME-like）的响应组成。
>Http报文通常都是使用TCP连接传送。
>但是HTTP协议本身是无连接的。
>这就是说，虽然HTTP协议使用了TCP连接，但通信的双方在交换HTTP报文之前，不需要先建立HTTP连接。
>HTTP协议是无状态的。

这边对 cookie和session最相关的一点就是HTTP协议是无状态的，
也就是即使是一个页面用户的第二次访问服务器并不知晓，HTTP并不记录用户的访问状态。
这里你可以会吐槽下HTTP协议了，但是当初这么设计也是有原因的，
因为这种无状态特性简化了服务器的设计，使得服务器更容易支持大量并发的HTTP请求。

既然HTTP协议本身不支持这种状态记录的功能，那就只能通过其它办法了。
很显然，其中一个解决的办法就是就是在第一次访问时，我们将些状态信息记录下来放在客户端，
下次再访问该页面（或者应用时）将这些信息发送给服务器，这样服务器就知道：哦，这个人曾经访问过。
这样的话，服务器可以根据这些信息进行做出不同的响应。
而cookie指的就是客户端的相关信息，session则是服务器的相关信息。

更加专业的一种说法就是cookie机制采用的是在客户端保持状态的方案，而session机制采用的是在服务器端保持状态的方案。

###首先来说说cookie###

正统的cookie分发是通过扩展HTTP协议来实现的，服务器通过在HTTP的响应头中加上一行特殊的指示以提示浏览器按照指示生成相应的cookie。
然而纯粹的客户端脚本如JavaScript或者VBScript也可以生成cookie。（这个还没有研究过，估计利用这个功能制造一些攻击什么的。）
而cookie的使用是由浏览器按照一定的原则在后台自动发送给服务器的。
浏览器检查所有存储的cookie，如果某个cookie所声明的作用范围大于等于将要请求的资源所在的位置，
则把该cookie附在请求资源的HTTP请求头上发送给服务器。
也就是在HTTP头上指定生成cookie，之后的行为方法很大都是取决浏览器，
比如如果是持久cookie（下面会提到说明什么是持久cookie），文件的名称，存放的位置，以及下次按照怎样的规则，
如何把这些信息传送到服务器端都是由浏览器来决定和执行的。

cookie的内容主要包括：名字，值，过期时间，路径和域。
路径与域一起构成cookie的作用范围。
若不设置过期时间，则表示这个cookie的生命期为浏览器会话期间，关闭浏览器窗口，cookie就消失。
这种生命期为浏览器会话期的cookie被称为会话cookie。会话cookie一般不存储在硬盘上而是保存在内存里，当然这种行为并不是规范规定的。
若设置了过期时间，浏览器就会把cookie保存到硬盘上，关闭后再次打开浏览器，这些cookie仍然有效直到超过设定的过期时间。

###再来看一看session机制###

session通常采种散列表（key-value）这种数据结构保存在服务器端，通过sessionID来标识不同的会话。
当程序需要为某个客户端的请求创建一个session时，服务器首先检查这个客户端的请求里是否已包含了一个sessionID，
如果已包含则说明以前已经为此客户端创建过session，服务器就按照sessionID把这个session检索出来使用（检索不到，会新建一个），
如果客户端请求不包含sessionID，则为此客户端创建一个session并且生成一个与此session相关联的sessionID，
sessionID的值应该是一个既不会重复，又不容易被找到规律以仿造的字符串，这个sessionID将被在本次响应中返回给客户端保存。
保存这个sessionID的方式可以采用cookie，这样在交互过程中浏览器可以自动的按照规则把这个标识发送给服务器。
一般这个cookie的名字都是类似于SEEESIONID。但cookie可以被人为的禁止，
则必须有其他机制以便在cookie被禁止时仍然能够把session id传递回服务器。
经常被使用的一种技术叫做URL重写，就是把sessionID直接附加在URL路径的后面。
还有一种技术叫做表单隐藏字段，就是服务器会自动修改表单，添加一个隐藏字段，以便在表单提交时能够把sessionID传递回服务器。
实际上这种技术可以简单的用对action应用URL重写来代替。

和cookie一样，session的具体存储方式完全取决于服务器端，可以将其写入文件，或者就一直置于内存中。
在php中想要使用session的话，需要注意php.ini中的配置项，最主要的是session.save_handler和session.save_path这两个，
一个指定了存储会话的方式，比如可以是files,redis等，另一个指定了存储的位置。
除了直接查看php.ini外，可以使用phpinfo()函数来查看。
另外session也是有失效时间的，这是必须的设置，
因为为了保持状态，session通常是在用户在点击logout时才去删除session，
但是并不能保证用户在离开时都会点击logout来删除会话，所以session需要设置失效时间来避免这种情况。
所以有时候当你登陆一个网站后，很长时间没有操作后再想操作时，发现需要重新登陆。

###简单总结下session和cookie的相同之处和区别###

####相同之外：####
1. 为了维持状态，提供了多次访问之间的信息共享

2. 都有失效时间

####区别：####

1. session处于服务器端，cookie处于客户端，很多应用场景下是通过sessionID来结合使用的

2. 注意会话cookie和session的区别，用户关闭浏览器的话，会话cookie会消失，但是session仍在服务器端，除非手动删除或者超时
